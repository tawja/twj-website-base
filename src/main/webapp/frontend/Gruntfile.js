/* jshint node: true */
'use strict';

function getTask(name) {
    return require('./tasks/' + name + '.js');
}
module.exports = function (grunt) {

    require('time-grunt')(grunt);
    require('load-grunt-tasks')(grunt, {
        pattern: [
            'grunt-*',
            'assemble',
            'assemble-*',
            'pretty'
        ]
    });

    //grunt.loadNpmTasks('assemble-middleware-sitemap');
    //grunt.loadNpmTasks('pretty');

    // Project configuration.
    grunt.initConfig({
        // Maven Properties
        gruntMavenProperties: grunt.file.readJSON('grunt-maven.json'),
        // Generated by maven project and replace properties with maven context ones
        mavenProperties: grunt.file.readJSON('config/maven-properties.json'),
        // Project Metadata
        pkg: grunt.file.readJSON('package.json'),
        config: grunt.file.readYAML('config.yml'),
        configSite: grunt.file.readYAML('config-site.yml'),
        banner: '/**\n' +
                '* Tawja - <%=pkg.name %> v<%= pkg.version %>\n' +
                '* Author : <%= pkg.author.name %> \n' +
                '* Copyright <%= grunt.template.today("yyyy") %>\n' +
                '* Licensed under <%= pkg.license.type %> (<%= pkg.license.url %>)\n' +
                '*/\n',
        clean: getTask('clean'),
        /**
         * copy: getTask('copy'),
         */
        sync: getTask('sync'),
        less: getTask('less'),
        concat: getTask('concat'),
        uglify: getTask('uglify'),
        /**
         * Lint JavaScript
         */
        jshint: getTask('jshint'),
        /**
         * Build HTML from templates and data
         */
        assemble: getTask('assemble'),
        htmlmin: getTask('htmlmin'),
        modernizr: getTask('modernizr'),
        watch: getTask('watch'),
        connect: getTask('connect'),
        //webfont_svg_extractor: getTask('webfont_svg_extractor')
    });


    //grunt.registerTask('webfont_extractor', ['clean', 'webfont_svg_extractor']);

    // Manage specific properties for DEV vs PROD
    //var tawjaModedev = grunt.config(['config', 'dev']);
    var tawjaModedev = grunt.config(['mavenProperties', 'tawjaModeDev']);
    console.log('DEV Mode : %s', tawjaModedev);
    if (tawjaModedev === 'true')
    {
        console.log('Mode : %s', "DEV");
        grunt.config.set('config.dev', true);
        grunt.config.set('config.livereload', true);
        grunt.config.set('config.minExtPrefix', '');
        grunt.config.set('config.analytics', false);
    } else {
        console.log('Mode : %s', "PROD");
        grunt.config.set('config.minExtPrefix', '.min');
    }

    // Optimized distribution task.
    grunt.registerTask('dist-optimized', ['uglify', 'htmlmin']);

    // JS distribution task.
    grunt.registerTask('dist-js', ['modernizr', 'jshint', 'concat']);

    // Work distribution task.
    grunt.registerTask('compile', ['less', 'dist-js']);

    grunt.registerTask('serve', ['connect:livereload', 'watch']);

    if (grunt.config(['config', 'dev']))
    {
        grunt.registerTask('build', ['compile', 'assemble']);
    } else {
        grunt.registerTask('build', ['compile', 'assemble', 'dist-optimized']);
    }


    // Full distribution task.
    grunt.registerTask('dist', ['clean', 'build', 'test']);

    // 
    // Default task.
    //grunt.registerTask('default', ['test', 'dist']);

    grunt.registerTask('default', ['sync:maven', 'sync:main', 'sync:specifics', 'sync:lib', 'build', 'sync:override']);


};
